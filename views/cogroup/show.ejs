<!--Table views of a single company's branches, contacts and products-->

<div class='container-fluid'>
    
    
    <div class="row text-center">
        <div class="col-md-4 h1 text-center">
            <div class="row">
                <strong data-bind="text: co_name"></strong>
                <font color="lightgrey">(公司)</font>
            </div>
            <div class="row">
                <form action="/cogroup/toggle" method="post"><input type="hidden" name="_csrf" value="<%= _csrf %>" />
                    <input type="hidden" name="cogroup" value="<%= cogroup.name %>">
                    <input type="hidden" name="back" value="/cogroup/show/<%= cogroup.name %>">
                    <div class="btn-group">
                        <button data-bind="click: toggleSupplier, attr: {'class': supplierStatus}"> 供應商</button>
                        <button data-bind="click: toggleCustomer, attr: {'class': customerStatus}"> 客戶</button>
                    </div>
                </form>
            </div>
        </div>
        <div class="col-md-8">
            <div class="btn-group-vertical">
                <a disabled href="/cogroup/show/<%= cogroup.name %>" class="active btn btn-custom"><i class="glyphicon glyphicon-info-sign"></i> <strong>公司,聯絡人,產品訊息</strong></a>
                <a href="/product/show/<%= cogroup.name %>" class="btn btn-custom"><i class="glyphicon glyphicon-pencil"></i> <strong>管理使用中訂單,創造出貨單</strong></a>
                <a href="/order/showall/<%= cogroup.name %>" class="btn btn-custom"><i class="glyphicon glyphicon-folder-open"></i> <strong>全部訂單歷史</strong></a>
            </div>
        </div>
    </div>
        
<!--SHOW DELETE BUTTON IF THERE ARE NO BRANCHES-->
   <% if (cogroup.branches.length == 0) { %>
    <div class="row text-center">
        <a href="/cogroup/destroy/<%= cogroup.name %>" class="btn btn-danger btn-lg">DELETE COMPANY GROUP ID</a>
    </div>
    <% } %>
    
    
    
	<hr>
<!--COMPANY BRANCHES LIST-->
    
    
    <h2>分公司</h2>
<table class="table table-condensed">
    <thead class="text-uppercase">
        <tr>
            <th>縮寫</th>
            <th>名稱 / 統一編號</th>
            <th>電話 / 傳真</th>
            <th>地址 (辦公室 / 運輸 / 發票)</th>
            <th>備註</th>
            <th></th>
        </tr>
    </thead>
    <tbody data-bind="foreach: branches">
        <tr>
            <td><input size="4" placeholder="name" data-bind="value: name, disable: saved"></td>
            <td style="width: 20%">
                <input placeholder="full name" style="width: 100%;" data-bind="value: fullname">
                <br>
                <input size="6" placeholder="tax id" data-bind="value: tax_id">
            </td>
            <td style="width: 20%">
                <input placeholder="phone" style="width: 100%;" data-bind="value: phone">
                <br>
                <input placeholder="fax" style="width: 100%;" data-bind="value: fax">
            </td>
            <td style="width: 30%">
                <input placeholder="office address" style="width: 100%;" data-bind="value: address_office">
                <br>
                <input placeholder="shipping address" style="width: 100%;" data-bind="value: address_shipping">
                <br>
                <input placeholder="billing address" style="width: 100%;" data-bind="value: address_billing">
            </td>
            <td style="width: 25%">
                <textarea rows="3" placeholder="note" style="width: 100%;" data-bind="value: note"></textarea>
            </td>
            <td>
                <button class="btn btn-xs btn-danger" data-bind="click: $parent.removeBranch">刪除</button>
            </td>
        </tr>
        </tbody>
</table>
    
    
<!--	<a class="btn btn-medium btn-primary" href="/branch/new/<%= cogroup.name %>">Add branch</a>-->
    <button class="btn btn-medium btn-primary" data-bind="click: addBranch">Add branch</button>
    <button class="btn btn-medium btn-primary" data-bind="click: saveBranches"><span data-bind="text: saveMessage"></span></button>
    
    
    
    <hr>
<!--CONTACTS LIST-->
    
    
    <h2>聯絡人</h2>
	<% if (cogroup.branches.length > 0) { %>
    <table class="table table-condensed">
        <thead class="text-uppercase">
            <tr>
                <th>分公司</th>
                <th>職位</th>
                <th>姓名</th>
                <th>電話</th>
                <th>傳真</th>
                <th>Email</th>
                <th>備註</th>
                <th>刪除</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: contacts">
            <tr>
                <td><select data-bind="options: $root.branchOptions, value: branch"></select></td>
                <td><input size="5" placeholder="position" data-bind="value: position"></td>
                <td><input size="4" placeholder="name" data-bind="value: name"></td>
<!--                <td><input data-bind="value: branch"></td>-->
                <td style="width: 20%"><input placeholder="phone" style="width: 100%;" data-bind="value: phone"></td>
                <td style="width: 20%"><input placeholder="fax" style="width: 100%;" data-bind="value: fax"></td>
                <td style="width: 20%"><input placeholder="email" style="width: 100%;" data-bind="value: email"></td>
                <td style="width: 25%"><input placeholder="note" style="width: 100%;" data-bind="value: note"></td>
                <td>
                    <button class="btn btn-xs btn-danger" data-bind="click: $parent.removeContact">刪除</button>
                </td>
            </tr>
        </tbody>
    </table>
    
    
    <button class="btn btn-medium btn-primary" data-bind="click: addContact">Add contact</button>
    <button class="btn btn-medium btn-primary" data-bind="click: saveContacts"><span data-bind="text: saveMessage"></span></button>
<!--	<a class="btn btn-medium btn-primary" href="/contact/new/<%= cogroup.name %>">Add contact</a>-->
    <% } else { %>
    <h3><span class="label label-primary">先添加一家分公司</span></h3>
    <% } %>
    
    
    
    <hr>
<!--PRODUCT AND SERVICES LIST-->
    
    
    <h2>產品/服務</h2>
    
    <form action="/order/new">
    
        
        
        
        
        
        
        
        
<table class="table table-condensed">
    <thead class="text-uppercase"><tr>
        <th>順序</th>
        <th>選</th>
        <th>內用品名</th>
        <th>標籤品名</th>
        <th><abbr title="桶, 包, 瓶, 等...">容器</abbr></th>
        <th><abbr title="# of kg, L, gal per container">容量</abbr></th>
        <th><abbr title="kg, L, gal, etc.">單位</abbr></th>
<!--        <th><abbr title="Price by container or volume?">價格單位</abbr></th>-->
        <th>包裝描述</th>
        <th>備註</th>
        <th>編輯</th>
    </tr></thead>
    <tbody data-bind="foreach: products">
        <tr>
            <td>
                <div class="btn-group btn-group-xs">
                    <button class="btn btn-xs btn-custom" data-bind="click: $parent.productUpOne"><i class="glyphicon glyphicon-triangle-top"></i></button>
                    <button class="btn btn-xs btn-custom" data-bind="click: $parent.productDownOne"><i class="glyphicon glyphicon-triangle-bottom"></i></button>
                </div>
            </td>
            
<!--        Product Manifest selection    -->
            <td>
                <input type="checkbox" name="product" data-bind="value: MPN, disable: discontinued">
            </td>
            
            
<!--        Product inventory name    -->
            <td>
                <font data-bind="style: {color :product_label().length > 0 ? 'grey' : 'black' }">
                    <abbr data-bind="title: english_name, text: inventory_name"></abbr>
                </font>
                
                <font color="red" data-bind="visible: discontinued">
                    <abbr title="已停用:Not currently used">
                        <span class="glyphicon glyphicon-ban-circle"></span>
                    </abbr>
                </font>
            </td>
            <td data-bind="text: product_label"></td>
            <td data-bind="text: SKU">
                <span class="badge" data-bind="visible: unitpriced() === false"><abbr title="Priced by container" class="glyphicon glyphicon-usd"></abbr></span>
            </td>
            <td class="text-right" data-bind="text: units"></td>
            <td>
                <span data-bind="text: UM"></span>
                <span data-bind="visible: unitpriced() === true" class="badge"><abbr title="Priced by unit" class="glyphicon glyphicon-usd"></abbr></span>
            </td>
            <td data-bind="text: SKUlong"></td>
            <td data-bind="text: note"></td>
        </tr>
    </tbody>
</table>
        
        
        
        
        
        
        
        
    
    <input type="hidden" name="backlink" value="/cogroup/show/<%= cogroup.name %>" />
	<a class="btn btn-medium btn-primary" href="/product/new/<%= cogroup.name %>">Add product</a>
	<a id="CreatePO"></a><input type="submit" class="btn btn-medium btn-primary" name="make_po" value="Create PO">
	<input type="submit" class="btn btn-medium btn-primary" name="make_shipment" value="Create Shipment Without PO">
    
    </form>
    
	
</div>

<script>
var cogroup = <%- JSON.stringify(cogroup) %>;
var co_name = '<%= cogroup.name %>';
var _csrf = '<%= _csrf %>';

function KO_Cogroup(data) {
    var self = this,
        data = data || {};
    
    self.name = ko.observable(data.name); // ID - Primary Key
    self.is_active = ko.observable(data.is_active);
    self.is_supplier = ko.observable(data.is_supplier);
    self.is_customer = ko.observable(data.is_customer);
}

function KO_Branch(data) {
    var self = this,
        data = data || {};
    
    self.name = ko.observable(data.name || null); // ID - Primary Key
    self.group = ko.observable(data.group || '<%= cogroup.name %>');
    self.fullname = ko.observable(data.fullname || '');
    self.english_name = ko.observable(data.english_name || '');
    self.tax_id = ko.observable(data.tax_id || '');
    self.phone = ko.observable(data.phone || '');
    self.fax = ko.observable(data.fax || '');
    self.email = ko.observable(data.email || '');
    self.note = ko.observable(data.note || '');
    self.address_office = ko.observable(data.address_office || '');
    self.address_shipping = ko.observable(data.address_shipping || '');
    self.address_billing = ko.observable(data.address_billing || '');
    self.address = ko.observable(data.address || '');
    self.is_active = ko.observable(data.is_active === undefined ? true : data.is_active);
    
    self.saved = self.name() !== null ? true : false;
}

function KO_Contact(data) {
    var self = this,
        data = data || {};
    
    self.id = ko.observable(data.id || null); // ID - Primary Key
    self.group = ko.observable(data.group || '<%= cogroup.name %>');
    self.branch = ko.observable(data.branch || '');
    self.name = ko.observable(data.name || '');
    self.position = ko.observable(data.position || '');
    self.phone = ko.observable(data.phone || '');
    self.fax = ko.observable(data.fax || '');
    self.email = ko.observable(data.email || '');
    self.note = ko.observable(data.note || '');
}

function KO_Product(data) {
    var self = this,
        data = data || {};
    
    self.MPN = ko.observable(data.MPN || null); // ID - Primary Key
    self.group = ko.observable(data.group || '<%= cogroup.name %>');
    self.product_label = ko.observable(data.product_label || '');
    self.inventory_name = ko.observable(data.inventory_name || '');
    self.english_name = ko.observable(data.english_name || '');
    self.units = ko.observable(data.units || '');
    self.UM = ko.observable(data.UM || '');
    self.SKU = ko.observable(data.SKU || '');
    self.SKUlong = ko.observable(data.SKUlong || '');
    self.note = ko.observable(data.note || '');
    self.curr_price = ko.observable(data.curr_price || '');
    self.unitpriced = ko.observable(data.unitpriced === undefined ? true : data.unitpriced);
    // !! Need to add 'unitcounted' to database.
    self.unitcounted = ko.observable(data.unitcounted === undefined ? true : data.unitcounted);
    self.is_supply = ko.observable(data.is_supply === undefined ? false : data.is_supply);
    self.discontinued = ko.observable(data.discontinued === undefined ? false : data.discontinued);
    self.json = ko.observable(data.json || {});
}

function PageModel() {
    var self = this;
    
    // Branch name options for select list.
    self.branchOptions = ko.observableArray();
    
    
    
    
    /**
     * COGROUP section controls
     * 
     * 
     */
    self.cogroup = new KO_Cogroup(cogroup);
    
    self.supplierStatus = ko.computed(function () {
        return self.cogroup.is_supplier() === true ? "glyphicon glyphicon-ok btn btn-success" : "glyphicon glyphicon-remove btn btn-danger";
    });
    
    self.customerStatus = ko.computed(function () {
        return self.cogroup.is_customer() === true ? "glyphicon glyphicon-ok btn btn-success" : "glyphicon glyphicon-remove btn btn-danger";
    });
    
    self.toggleCustomer = function () {
        self.cogroup.is_customer(!self.cogroup.is_customer());
        self.cogroupUpdate();
    };
    self.toggleSupplier = function () {
        self.cogroup.is_supplier(!self.cogroup.is_supplier());
        self.cogroupUpdate();
    };
                
    self.cogroupUpdate = function () {
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState !== 4) return;
            
        };
        xmlhttp.open('POST', '/cogroup/update', true);
        xmlhttp.setRequestHeader('Content-type', 'application/json');
        xmlhttp.send(ko.toJSON({
            _csrf: _csrf, 
            cogroup_update: self.cogroup
        }));
    };
    
    
    
    /**
     * BRANCH section controls
     * 
     * 
     */
    self.branches = ko.observableArray();
    self.branchDeleteIDs = ko.observableArray();
    self.addBranch = function() {
        self.branches.push(new KO_Branch());
    };
    self.removeBranch = function(branch) {
        /**
         * !! BUG: This is tricky, a new unsaved name could be added that exists
         * in the database and then if deleted before adding could delete another 
         * existing record. Need to be careful with overwriting existing records.
         * But any attached records will prevent an existing record from being
         * deleted.
         */ 
        if (branch.name() !== null && branch.name() !== '') {
            self.branchDeleteIDs.push(branch.name());
        }
        self.branches.remove(branch);
    };
    
    self.getBranches = function () {
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState !== 4) return;
            
            var db_branches = JSON.parse(xmlhttp.response);
            
            self.branches.removeAll();
            self.branchDeleteIDs.removeAll();
            self.branchOptions.removeAll();
            for (var i=0; i<db_branches.length; i++) {
                self.branches.push(new KO_Branch(db_branches[i]));
                self.branchOptions.push(db_branches[i].name);
            }
            // Refresh Contacts so that the correct branch is set.
            self.getContacts();
        };
        xmlhttp.open('POST', '/branch/branchList', true);
        xmlhttp.setRequestHeader('Content-type', 'application/json');
        xmlhttp.send(ko.toJSON({
            _csrf: _csrf, 
            id: co_name
        }));
    };
    
    self.saveBranches = function() {
        // Check that all branch names are unique to preventing overwriting.
        function all_branch_names_are_unique() {
            var checklist = [];
            for (var i in self.branches()) {
                if (checklist.indexOf(self.branches()[i].name()) !== -1) {
                    return false;
                }
                checklist.push(self.branches()[i].name());
            }
            return true;
        }
           
        if (!all_branch_names_are_unique()) {
            console.log('Branch names are not unique!');
            return false;
        }
        
        // Temporarily change save button message and prevent multiple clicks.
        if (self.saveMessage() === 'Save Changes') {
            self.saveMessage('Please wait ...');   
            var xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
                    setTimeout(function(){
                        // Reset save button message.
                        self.getBranches();
                    }, 100);
                    setTimeout(function(){
                        // Reset save button message.
                        self.saveMessage('Save Changes');
                    }, 500);
                }
            };
            xmlhttp.open('POST', '/branch/merge', true);
            xmlhttp.setRequestHeader('Content-type', 'application/json');
            xmlhttp.send(ko.toJSON({
                _csrf: _csrf, 
                id: co_name, 
                branchList: self.branches,
                branchDeleteIDs: self.branchDeleteIDs,
            }));
        }
    };
    
    self.getBranches();
    
    
    
    
    
    /**
     * CONTACT section controls
     * 
     * 
     */
    // Save button text
    self.saveMessage = ko.observable('Save Changes');
    
    self.contacts = ko.observableArray();
    self.deleteIDs = ko.observableArray();
    self.addContact = function() {
        self.contacts.push(new KO_Contact());
    };
    self.removeContact = function(contact) {
        if (contact.id !== null && contact.id !== '') {
            self.deleteIDs.push(contact.id);
        }
        self.contacts.remove(contact);
    };
    
    self.saveContacts = function() {
        // Temporarily change save button message and prevent multiple clicks.
        if (self.saveMessage() === 'Save Changes') {
            self.saveMessage('Please wait ...');   
            var xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
                    self.getContacts();
                    setTimeout(function(){
                        // Reset save button message.
                        self.saveMessage('Save Changes');
                    }, 500);
                }
            };
            xmlhttp.open('POST', '/contact/merge', true);
            xmlhttp.setRequestHeader('Content-type', 'application/json');
            xmlhttp.send(ko.toJSON({
                _csrf: _csrf, 
                id: co_name, 
                contactList: self.contacts,
                deleteIDs: self.deleteIDs,
            }));
        }
    };
    
    self.getContacts = function () {
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState !== 4) return;
            
            var db_contacts = JSON.parse(xmlhttp.response);
            
            self.contacts.removeAll();
            self.deleteIDs.removeAll();
            for (var i=0; i<db_contacts.length; i++) {
                self.contacts.push(new KO_Contact(db_contacts[i]));
            }
        };
        xmlhttp.open('POST', '/contact/contactList', true);
        xmlhttp.setRequestHeader('Content-type', 'application/json');
        xmlhttp.send(ko.toJSON({
            _csrf: _csrf, 
            id: co_name
        }));
    };
    
    self.getContacts();
    
    
    /**
     * PRODUCT section controls
     * 
     * 
     */
    self.products = ko.observableArray();
    self.productsToDelete = ko.observableArray();
    self.productsGet = function () {
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState !== 4) return;
            
            var db_products = JSON.parse(xmlhttp.response);
            
            self.products.removeAll();
            self.productsToDelete.removeAll();
            for (var i=0; i<db_products.length; i++) {
                self.products.push(new KO_Product(db_products[i]));
            }
            self.productsSort();
        };
        xmlhttp.open('POST', '/product/get', true);
        xmlhttp.setRequestHeader('Content-type', 'application/json');
        xmlhttp.send(ko.toJSON({
            _csrf: _csrf, 
            id: co_name
        }));
    };
    
    self.productsGet();
    // Sort products by rank value (in json data).
    self.productsSort = function () {
        self.products.sort(function (a, b) {
            return a.json().rank - b.json().rank;
        });
    }
    
    self.productUpOne = function (prod) {
        var index = self.products().indexOf(prod);
        if (index > 0) {
            var temp = self.products()[index].json().rank;
            self.products()[index].json().rank = self.products()[index-1].json().rank;
            self.products()[index-1].json().rank = temp;
        }
        self.productsSort();
        self.productsUpdate(self.products.slice(index-1, index+1));
    };
    self.productDownOne = function (prod) {
        var index = self.products().indexOf(prod);
        if (index < self.products().length-1) {
            var temp = self.products()[index].json().rank;
            self.products()[index].json().rank = self.products()[index+1].json().rank;
            self.products()[index+1].json().rank = temp;
        }
        self.productsSort();
        self.productsUpdate(self.products.slice(index, index+2));
    };
    
    self.productsUpdate = function (prods) {
        // Verify product rank numbers and update all products if incorrect.
        for (var i=0; i<self.products().length; i++) {
            if (self.products()[i].json().rank !== i) {
                prods = self.products;
                self.products()[i].json().rank = i;
            }
        }
        
        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState !== 4) return;
            
        };
        xmlhttp.open('POST', '/product/merge', true);
        xmlhttp.setRequestHeader('Content-type', 'application/json');
        xmlhttp.send(ko.toJSON({
            _csrf: _csrf, 
            id: co_name,
            products: prods
        }));
    };
}

ko.applyBindings(new PageModel());
</script>